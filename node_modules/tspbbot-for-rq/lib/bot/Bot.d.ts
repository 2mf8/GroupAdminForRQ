import Long from "long";
import WebSocket from "ws";
import LRUCache from 'lru-cache';
import { Msg } from "../util/Msg";
import * as onebot from "../proto/onebot_frame";
import Frame = onebot.Frame;
import * as Api from "../proto/onebot_api";
import { MessageReceipt } from "../proto/onebot_base";
interface WaitingFrame {
    resolve: (value: Frame | PromiseLike<Frame>) => void;
    reject: (reason?: any) => void;
    echo: string;
}
export declare class Bot {
    botId: number;
    session: WebSocket;
    waitingFrames: LRUCache<string, WaitingFrame>;
    static bots: Map<Long.Long, Bot>;
    constructor(botId: number, session: WebSocket);
    handleFrame(frame: Frame): Promise<void>;
    sendFrame(frame: Frame): void;
    sendFrameAndWait(frame: Frame): Promise<Frame>;
    sendPrivateMessage(userId: Long | string | number, msg: string | Msg, autoEscape?: boolean): Promise<Api.SendGroupMsgResp | null>;
    sendGroupMessage(groupId: Long | string | number, msg: string | Msg, autoEscape?: boolean): Promise<Api.SendGroupMsgResp | null>;
    deleteMsg(messageId: MessageReceipt): Promise<Api.DeleteMsgResp | null>;
    getMsg(messageId: number): Promise<Api.GetMsgResp | null>;
    setGroupKick(groupId: Long | string | number, userId: Long | string | number, rejectAddRequest: boolean): Promise<Api.SetGroupKickResp | null>;
    setGroupBan(groupId: Long | string | number, userId: Long | string | number, duration: number): Promise<Api.SetGroupBanResp | null>;
    setGroupWholeBan(groupId: Long | string | number, enable: boolean): Promise<Api.SetGroupWholeBanResp | null>;
    setGroupCard(groupId: Long | string | number, userId: Long | string | number, card: string): Promise<Api.SetGroupCardResp | null>;
    setGroupLeave(groupId: Long | string | number, isDismiss: boolean): Promise<Api.SetGroupLeaveResp | null>;
    setGroupSpecialTitle(groupId: Long | string | number, userId: Long | string | number, specialTitle: string, duration: number): Promise<Api.SetGroupSpecialTitleResp | null>;
    setFriendAddRequest(flag: string, approve: boolean, remark: string): Promise<Api.SetFriendAddRequestResp | null>;
    setGroupAddRequest(flag: string, subType: string, type: string, approve: boolean, reason: string): Promise<Api.SetGroupAddRequestResp | null>;
    getLoginInfo(): Promise<Api.GetLoginInfoResp | null>;
    getStrangerInfo(userId: Long | string | number, noCache?: boolean): Promise<Api.GetStrangerInfoResp | null>;
    getFriendList(): Promise<Api.GetFriendListResp | null>;
    getGroupList(): Promise<Api.GetGroupListResp | null>;
    getGroupInfo(groupId: Long | string | number, noCache?: boolean): Promise<Api.GetGroupInfoResp | null>;
    getGroupMemberInfo(groupId: Long | string | number, userId: Long | string | number, noCache?: boolean): Promise<Api.GetGroupMemberInfoResp | null>;
    getGroupMemberList(groupId: Long | string | number): Promise<Api.GetGroupMemberListResp | null>;
}
export {};
