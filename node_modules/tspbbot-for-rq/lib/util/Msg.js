"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Msg = void 0;
var convertLong_1 = require("./convertLong");
var Msg = /** @class */ (function () {
    function Msg() {
        this.messageList = [];
    }
    Msg.builder = function () {
        return new Msg();
    };
    Msg.prototype.text = function (text) {
        this.messageList.push({
            type: "text",
            data: {
                "text": text
            }
        });
        return this;
    };
    Msg.prototype.tts = function (text) {
        this.messageList.push({
            type: "tts",
            data: {
                "text": text
            }
        });
        return this;
    };
    Msg.prototype.record = function (url) {
        this.messageList.push({
            type: "record",
            data: {
                "url": url
            }
        });
        return this;
    };
    Msg.prototype.at = function (qq) {
        this.messageList.push({
            type: "at",
            data: {
                "qq": (0, convertLong_1.toLong)(qq).toString()
            }
        });
        return this;
    };
    Msg.prototype.atAll = function () {
        this.messageList.push({
            type: "at",
            data: {
                "qq": "all"
            }
        });
        return this;
    };
    Msg.prototype.dice = function (value) {
        this.messageList.push({
            type: "dice",
            data: {
                "value": value.toString()
            }
        });
        return this;
    };
    Msg.prototype.face = function (id) {
        this.messageList.push({
            type: "face",
            data: {
                "id": id.toString()
            }
        });
        return this;
    };
    Msg.prototype.flash = function (url) {
        this.messageList.push({
            type: "image",
            data: {
                "url": url,
                "type": "flash"
            }
        });
        return this;
    };
    Msg.prototype.show = function (url, effectId) {
        if (effectId === void 0) { effectId = 40000; }
        this.messageList.push({
            type: "image",
            data: {
                "url": url,
                "type": "show",
                "effect_id": effectId.toString()
            }
        });
        return this;
    };
    Msg.prototype.share = function (url, title, content, image) {
        this.messageList.push({
            type: "share",
            data: {
                "url": url,
                "title": title,
                "content": content,
                "image": image,
            }
        });
        return this;
    };
    Msg.prototype.lightApp = function (content) {
        this.messageList.push(({
            type: "light_app",
            data: {
                "content": content
            }
        }));
        return this;
    };
    Msg.prototype.xml = function (id, content) {
        this.messageList.push({
            type: "service",
            data: {
                "sub_type": "xml",
                "id": id.toString(),
                "content": content
            }
        });
        return this;
    };
    Msg.prototype.json = function (id, content) {
        this.messageList.push({
            type: "service",
            data: {
                "sub_type": "json",
                "id": id.toString(),
                "content": content
            }
        });
        return this;
    };
    Msg.prototype.image = function (url) {
        this.messageList.push({
            type: "image",
            data: {
                "url": url
            }
        });
        return this;
    };
    Msg.prototype.reply = function (messageId) {
        this.messageList.push({
            type: "reply",
            data: {
                "message_id": messageId.toString()
            }
        });
        return this;
    };
    Msg.prototype.sleep = function (time) {
        this.messageList.push({
            type: "sleep",
            data: {
                "time": time.toString()
            }
        });
        return this;
    };
    Msg.prototype.video = function (url, cover, cache) {
        if (cache === void 0) { cache = true; }
        this.messageList.push({
            type: "video",
            data: {
                "url": url,
                "cover": cover,
                "cache": cache ? "1" : "0"
            }
        });
        return this;
    };
    Msg.prototype.gift = function (qq, id) {
        this.messageList.push({
            type: "gift",
            data: {
                "qq": qq.toString(),
                "id": id.toString(),
            }
        });
        return this;
    };
    Msg.prototype.poke = function (qq) {
        this.messageList.push({
            type: "poke",
            data: {
                "qq": qq.toString(),
            }
        });
        return this;
    };
    Msg.prototype.sendToGroup = function (bot, groupId, autoEscape) {
        if (autoEscape === void 0) { autoEscape = true; }
        bot.sendGroupMessage((0, convertLong_1.toLong)(groupId), this, autoEscape);
        return this;
    };
    Msg.prototype.sendToFriend = function (bot, userId, autoEscape) {
        if (autoEscape === void 0) { autoEscape = true; }
        bot.sendPrivateMessage((0, convertLong_1.toLong)(userId), this, autoEscape);
        return this;
    };
    return Msg;
}());
exports.Msg = Msg;
