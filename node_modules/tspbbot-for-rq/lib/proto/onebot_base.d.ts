import * as _m0 from "protobufjs/minimal";
export declare const protobufPackage = "onebot";
export interface Message {
    type: string;
    data: {
        [key: string]: string;
    };
}
export interface Message_DataEntry {
    key: string;
    value: string;
}
export interface MessageReceipt {
    senderId: number;
    time: number;
    seqs: number[];
    rands: number[];
    groupId: number;
}
export declare const Message: {
    encode(message: Message, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Message;
    fromJSON(object: any): Message;
    toJSON(message: Message): unknown;
    fromPartial<I extends {
        type?: string | undefined;
        data?: {
            [x: string]: string | undefined;
        } | undefined;
    } & {
        type?: string | undefined;
        data?: ({
            [x: string]: string | undefined;
        } & {
            [x: string]: string | undefined;
        } & Record<Exclude<keyof I["data"], string | number>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Message>, never>>(object: I): Message;
};
export declare const Message_DataEntry: {
    encode(message: Message_DataEntry, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Message_DataEntry;
    fromJSON(object: any): Message_DataEntry;
    toJSON(message: Message_DataEntry): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | undefined;
    } & {
        key?: string | undefined;
        value?: string | undefined;
    } & Record<Exclude<keyof I, keyof Message_DataEntry>, never>>(object: I): Message_DataEntry;
};
export declare const MessageReceipt: {
    encode(message: MessageReceipt, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MessageReceipt;
    fromJSON(object: any): MessageReceipt;
    toJSON(message: MessageReceipt): unknown;
    fromPartial<I extends {
        senderId?: number | undefined;
        time?: number | undefined;
        seqs?: number[] | undefined;
        rands?: number[] | undefined;
        groupId?: number | undefined;
    } & {
        senderId?: number | undefined;
        time?: number | undefined;
        seqs?: (number[] & number[] & Record<Exclude<keyof I["seqs"], keyof number[]>, never>) | undefined;
        rands?: (number[] & number[] & Record<Exclude<keyof I["rands"], keyof number[]>, never>) | undefined;
        groupId?: number | undefined;
    } & Record<Exclude<keyof I, keyof MessageReceipt>, never>>(object: I): MessageReceipt;
};
declare type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export declare type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
declare type KeysOfUnion<T> = T extends T ? keyof T : never;
export declare type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
