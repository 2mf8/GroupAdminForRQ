"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GroupRequestEvent_ExtraEntry = exports.GroupRequestEvent = exports.FriendRequestEvent_ExtraEntry = exports.FriendRequestEvent = exports.FriendRecallNoticeEvent_ExtraEntry = exports.FriendRecallNoticeEvent = exports.GroupRecallNoticeEvent_ExtraEntry = exports.GroupRecallNoticeEvent = exports.FriendAddNoticeEvent_ExtraEntry = exports.FriendAddNoticeEvent = exports.GroupBanNoticeEvent_ExtraEntry = exports.GroupBanNoticeEvent = exports.GroupIncreaseNoticeEvent_ExtraEntry = exports.GroupIncreaseNoticeEvent = exports.GroupDecreaseNoticeEvent_ExtraEntry = exports.GroupDecreaseNoticeEvent = exports.GroupAdminNoticeEvent_ExtraEntry = exports.GroupAdminNoticeEvent = exports.GroupUploadNoticeEvent_ExtraEntry = exports.GroupUploadNoticeEvent_File = exports.GroupUploadNoticeEvent = exports.GroupMessageEvent_ExtraEntry = exports.GroupMessageEvent_Sender = exports.GroupMessageEvent_Anonymous = exports.GroupMessageEvent = exports.PrivateMessageEvent_ExtraEntry = exports.PrivateMessageEvent_Sender = exports.PrivateMessageEvent = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var _m0 = __importStar(require("protobufjs/minimal"));
var onebot_base_1 = require("./onebot_base");
exports.protobufPackage = "onebot";
function createBasePrivateMessageEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        messageType: "",
        subType: "",
        userId: 0,
        message: [],
        rawMessage: "",
        font: 0,
        sender: undefined,
        messageId: undefined,
        extra: {},
    };
}
exports.PrivateMessageEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.messageType !== "") {
            writer.uint32(34).string(message.messageType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.userId !== 0) {
            writer.uint32(56).int64(message.userId);
        }
        for (var _i = 0, _a = message.message; _i < _a.length; _i++) {
            var v = _a[_i];
            onebot_base_1.Message.encode(v, writer.uint32(66).fork()).ldelim();
        }
        if (message.rawMessage !== "") {
            writer.uint32(74).string(message.rawMessage);
        }
        if (message.font !== 0) {
            writer.uint32(80).int32(message.font);
        }
        if (message.sender !== undefined) {
            exports.PrivateMessageEvent_Sender.encode(message.sender, writer.uint32(90).fork()).ldelim();
        }
        if (message.messageId !== undefined) {
            onebot_base_1.MessageReceipt.encode(message.messageId, writer.uint32(98).fork()).ldelim();
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.PrivateMessageEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePrivateMessageEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.messageType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 7:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.message.push(onebot_base_1.Message.decode(reader, reader.uint32()));
                    break;
                case 9:
                    message.rawMessage = reader.string();
                    break;
                case 10:
                    message.font = reader.int32();
                    break;
                case 11:
                    message.sender = exports.PrivateMessageEvent_Sender.decode(reader, reader.uint32());
                    break;
                case 12:
                    message.messageId = onebot_base_1.MessageReceipt.decode(reader, reader.uint32());
                    break;
                case 255:
                    var entry255 = exports.PrivateMessageEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            messageType: isSet(object.messageType) ? String(object.messageType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            message: Array.isArray(object === null || object === void 0 ? void 0 : object.message)
                ? object.message.map(function (e) { return onebot_base_1.Message.fromJSON(e); })
                : [],
            rawMessage: isSet(object.rawMessage) ? String(object.rawMessage) : "",
            font: isSet(object.font) ? Number(object.font) : 0,
            sender: isSet(object.sender)
                ? exports.PrivateMessageEvent_Sender.fromJSON(object.sender)
                : undefined,
            messageId: isSet(object.messageId)
                ? onebot_base_1.MessageReceipt.fromJSON(object.messageId)
                : undefined,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.messageType !== undefined &&
            (obj.messageType = message.messageType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        if (message.message) {
            obj.message = message.message.map(function (e) {
                return e ? onebot_base_1.Message.toJSON(e) : undefined;
            });
        }
        else {
            obj.message = [];
        }
        message.rawMessage !== undefined && (obj.rawMessage = message.rawMessage);
        message.font !== undefined && (obj.font = Math.round(message.font));
        message.sender !== undefined &&
            (obj.sender = message.sender
                ? exports.PrivateMessageEvent_Sender.toJSON(message.sender)
                : undefined);
        message.messageId !== undefined &&
            (obj.messageId = message.messageId
                ? onebot_base_1.MessageReceipt.toJSON(message.messageId)
                : undefined);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBasePrivateMessageEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.messageType = (_d = object.messageType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.userId = (_f = object.userId) !== null && _f !== void 0 ? _f : 0;
        message.message = ((_g = object.message) === null || _g === void 0 ? void 0 : _g.map(function (e) { return onebot_base_1.Message.fromPartial(e); })) || [];
        message.rawMessage = (_h = object.rawMessage) !== null && _h !== void 0 ? _h : "";
        message.font = (_j = object.font) !== null && _j !== void 0 ? _j : 0;
        message.sender =
            object.sender !== undefined && object.sender !== null
                ? exports.PrivateMessageEvent_Sender.fromPartial(object.sender)
                : undefined;
        message.messageId =
            object.messageId !== undefined && object.messageId !== null
                ? onebot_base_1.MessageReceipt.fromPartial(object.messageId)
                : undefined;
        message.extra = Object.entries((_k = object.extra) !== null && _k !== void 0 ? _k : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBasePrivateMessageEvent_Sender() {
    return { userId: 0, nickname: "", sex: "", age: 0 };
}
exports.PrivateMessageEvent_Sender = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.userId !== 0) {
            writer.uint32(8).int64(message.userId);
        }
        if (message.nickname !== "") {
            writer.uint32(18).string(message.nickname);
        }
        if (message.sex !== "") {
            writer.uint32(26).string(message.sex);
        }
        if (message.age !== 0) {
            writer.uint32(32).int32(message.age);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePrivateMessageEvent_Sender();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.sex = reader.string();
                    break;
                case 4:
                    message.age = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            nickname: isSet(object.nickname) ? String(object.nickname) : "",
            sex: isSet(object.sex) ? String(object.sex) : "",
            age: isSet(object.age) ? Number(object.age) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.nickname !== undefined && (obj.nickname = message.nickname);
        message.sex !== undefined && (obj.sex = message.sex);
        message.age !== undefined && (obj.age = Math.round(message.age));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBasePrivateMessageEvent_Sender();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : 0;
        message.nickname = (_b = object.nickname) !== null && _b !== void 0 ? _b : "";
        message.sex = (_c = object.sex) !== null && _c !== void 0 ? _c : "";
        message.age = (_d = object.age) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBasePrivateMessageEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.PrivateMessageEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePrivateMessageEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBasePrivateMessageEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupMessageEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        messageType: "",
        subType: "",
        groupId: 0,
        userId: 0,
        anonymous: undefined,
        message: [],
        rawMessage: "",
        font: 0,
        sender: undefined,
        messageId: undefined,
        extra: {},
    };
}
exports.GroupMessageEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.messageType !== "") {
            writer.uint32(34).string(message.messageType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(56).int64(message.groupId);
        }
        if (message.userId !== 0) {
            writer.uint32(64).int64(message.userId);
        }
        if (message.anonymous !== undefined) {
            exports.GroupMessageEvent_Anonymous.encode(message.anonymous, writer.uint32(74).fork()).ldelim();
        }
        for (var _i = 0, _a = message.message; _i < _a.length; _i++) {
            var v = _a[_i];
            onebot_base_1.Message.encode(v, writer.uint32(82).fork()).ldelim();
        }
        if (message.rawMessage !== "") {
            writer.uint32(90).string(message.rawMessage);
        }
        if (message.font !== 0) {
            writer.uint32(96).int32(message.font);
        }
        if (message.sender !== undefined) {
            exports.GroupMessageEvent_Sender.encode(message.sender, writer.uint32(106).fork()).ldelim();
        }
        if (message.messageId !== undefined) {
            onebot_base_1.MessageReceipt.encode(message.messageId, writer.uint32(114).fork()).ldelim();
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupMessageEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupMessageEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.messageType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 7:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 9:
                    message.anonymous = exports.GroupMessageEvent_Anonymous.decode(reader, reader.uint32());
                    break;
                case 10:
                    message.message.push(onebot_base_1.Message.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.rawMessage = reader.string();
                    break;
                case 12:
                    message.font = reader.int32();
                    break;
                case 13:
                    message.sender = exports.GroupMessageEvent_Sender.decode(reader, reader.uint32());
                    break;
                case 14:
                    message.messageId = onebot_base_1.MessageReceipt.decode(reader, reader.uint32());
                    break;
                case 255:
                    var entry255 = exports.GroupMessageEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            messageType: isSet(object.messageType) ? String(object.messageType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            anonymous: isSet(object.anonymous)
                ? exports.GroupMessageEvent_Anonymous.fromJSON(object.anonymous)
                : undefined,
            message: Array.isArray(object === null || object === void 0 ? void 0 : object.message)
                ? object.message.map(function (e) { return onebot_base_1.Message.fromJSON(e); })
                : [],
            rawMessage: isSet(object.rawMessage) ? String(object.rawMessage) : "",
            font: isSet(object.font) ? Number(object.font) : 0,
            sender: isSet(object.sender)
                ? exports.GroupMessageEvent_Sender.fromJSON(object.sender)
                : undefined,
            messageId: isSet(object.messageId)
                ? onebot_base_1.MessageReceipt.fromJSON(object.messageId)
                : undefined,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.messageType !== undefined &&
            (obj.messageType = message.messageType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.anonymous !== undefined &&
            (obj.anonymous = message.anonymous
                ? exports.GroupMessageEvent_Anonymous.toJSON(message.anonymous)
                : undefined);
        if (message.message) {
            obj.message = message.message.map(function (e) {
                return e ? onebot_base_1.Message.toJSON(e) : undefined;
            });
        }
        else {
            obj.message = [];
        }
        message.rawMessage !== undefined && (obj.rawMessage = message.rawMessage);
        message.font !== undefined && (obj.font = Math.round(message.font));
        message.sender !== undefined &&
            (obj.sender = message.sender
                ? exports.GroupMessageEvent_Sender.toJSON(message.sender)
                : undefined);
        message.messageId !== undefined &&
            (obj.messageId = message.messageId
                ? onebot_base_1.MessageReceipt.toJSON(message.messageId)
                : undefined);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var message = createBaseGroupMessageEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.messageType = (_d = object.messageType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.userId = (_g = object.userId) !== null && _g !== void 0 ? _g : 0;
        message.anonymous =
            object.anonymous !== undefined && object.anonymous !== null
                ? exports.GroupMessageEvent_Anonymous.fromPartial(object.anonymous)
                : undefined;
        message.message = ((_h = object.message) === null || _h === void 0 ? void 0 : _h.map(function (e) { return onebot_base_1.Message.fromPartial(e); })) || [];
        message.rawMessage = (_j = object.rawMessage) !== null && _j !== void 0 ? _j : "";
        message.font = (_k = object.font) !== null && _k !== void 0 ? _k : 0;
        message.sender =
            object.sender !== undefined && object.sender !== null
                ? exports.GroupMessageEvent_Sender.fromPartial(object.sender)
                : undefined;
        message.messageId =
            object.messageId !== undefined && object.messageId !== null
                ? onebot_base_1.MessageReceipt.fromPartial(object.messageId)
                : undefined;
        message.extra = Object.entries((_l = object.extra) !== null && _l !== void 0 ? _l : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupMessageEvent_Anonymous() {
    return { id: 0, name: "", flag: "" };
}
exports.GroupMessageEvent_Anonymous = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.id !== 0) {
            writer.uint32(8).int64(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.flag !== "") {
            writer.uint32(26).string(message.flag);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupMessageEvent_Anonymous();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = longToNumber(reader.int64());
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.flag = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? Number(object.id) : 0,
            name: isSet(object.name) ? String(object.name) : "",
            flag: isSet(object.flag) ? String(object.flag) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = Math.round(message.id));
        message.name !== undefined && (obj.name = message.name);
        message.flag !== undefined && (obj.flag = message.flag);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseGroupMessageEvent_Anonymous();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : 0;
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.flag = (_c = object.flag) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseGroupMessageEvent_Sender() {
    return {
        userId: 0,
        nickname: "",
        card: "",
        sex: "",
        age: 0,
        area: "",
        level: "",
        role: "",
        title: "",
    };
}
exports.GroupMessageEvent_Sender = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.userId !== 0) {
            writer.uint32(8).int64(message.userId);
        }
        if (message.nickname !== "") {
            writer.uint32(18).string(message.nickname);
        }
        if (message.card !== "") {
            writer.uint32(26).string(message.card);
        }
        if (message.sex !== "") {
            writer.uint32(34).string(message.sex);
        }
        if (message.age !== 0) {
            writer.uint32(40).int32(message.age);
        }
        if (message.area !== "") {
            writer.uint32(50).string(message.area);
        }
        if (message.level !== "") {
            writer.uint32(58).string(message.level);
        }
        if (message.role !== "") {
            writer.uint32(66).string(message.role);
        }
        if (message.title !== "") {
            writer.uint32(74).string(message.title);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupMessageEvent_Sender();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 2:
                    message.nickname = reader.string();
                    break;
                case 3:
                    message.card = reader.string();
                    break;
                case 4:
                    message.sex = reader.string();
                    break;
                case 5:
                    message.age = reader.int32();
                    break;
                case 6:
                    message.area = reader.string();
                    break;
                case 7:
                    message.level = reader.string();
                    break;
                case 8:
                    message.role = reader.string();
                    break;
                case 9:
                    message.title = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            nickname: isSet(object.nickname) ? String(object.nickname) : "",
            card: isSet(object.card) ? String(object.card) : "",
            sex: isSet(object.sex) ? String(object.sex) : "",
            age: isSet(object.age) ? Number(object.age) : 0,
            area: isSet(object.area) ? String(object.area) : "",
            level: isSet(object.level) ? String(object.level) : "",
            role: isSet(object.role) ? String(object.role) : "",
            title: isSet(object.title) ? String(object.title) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.nickname !== undefined && (obj.nickname = message.nickname);
        message.card !== undefined && (obj.card = message.card);
        message.sex !== undefined && (obj.sex = message.sex);
        message.age !== undefined && (obj.age = Math.round(message.age));
        message.area !== undefined && (obj.area = message.area);
        message.level !== undefined && (obj.level = message.level);
        message.role !== undefined && (obj.role = message.role);
        message.title !== undefined && (obj.title = message.title);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseGroupMessageEvent_Sender();
        message.userId = (_a = object.userId) !== null && _a !== void 0 ? _a : 0;
        message.nickname = (_b = object.nickname) !== null && _b !== void 0 ? _b : "";
        message.card = (_c = object.card) !== null && _c !== void 0 ? _c : "";
        message.sex = (_d = object.sex) !== null && _d !== void 0 ? _d : "";
        message.age = (_e = object.age) !== null && _e !== void 0 ? _e : 0;
        message.area = (_f = object.area) !== null && _f !== void 0 ? _f : "";
        message.level = (_g = object.level) !== null && _g !== void 0 ? _g : "";
        message.role = (_h = object.role) !== null && _h !== void 0 ? _h : "";
        message.title = (_j = object.title) !== null && _j !== void 0 ? _j : "";
        return message;
    },
};
function createBaseGroupMessageEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupMessageEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupMessageEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupMessageEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupUploadNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        groupId: 0,
        userId: 0,
        file: undefined,
        extra: {},
    };
}
exports.GroupUploadNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.groupId !== 0) {
            writer.uint32(40).int64(message.groupId);
        }
        if (message.userId !== 0) {
            writer.uint32(48).int64(message.userId);
        }
        if (message.file !== undefined) {
            exports.GroupUploadNoticeEvent_File.encode(message.file, writer.uint32(58).fork()).ldelim();
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupUploadNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupUploadNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 6:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.file = exports.GroupUploadNoticeEvent_File.decode(reader, reader.uint32());
                    break;
                case 255:
                    var entry255 = exports.GroupUploadNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            file: isSet(object.file)
                ? exports.GroupUploadNoticeEvent_File.fromJSON(object.file)
                : undefined,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.file !== undefined &&
            (obj.file = message.file
                ? exports.GroupUploadNoticeEvent_File.toJSON(message.file)
                : undefined);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseGroupUploadNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.groupId = (_e = object.groupId) !== null && _e !== void 0 ? _e : 0;
        message.userId = (_f = object.userId) !== null && _f !== void 0 ? _f : 0;
        message.file =
            object.file !== undefined && object.file !== null
                ? exports.GroupUploadNoticeEvent_File.fromPartial(object.file)
                : undefined;
        message.extra = Object.entries((_g = object.extra) !== null && _g !== void 0 ? _g : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupUploadNoticeEvent_File() {
    return { id: "", name: "", size: 0, busid: 0, url: "" };
}
exports.GroupUploadNoticeEvent_File = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.name !== "") {
            writer.uint32(18).string(message.name);
        }
        if (message.size !== 0) {
            writer.uint32(24).int64(message.size);
        }
        if (message.busid !== 0) {
            writer.uint32(32).int64(message.busid);
        }
        if (message.url !== "") {
            writer.uint32(42).string(message.url);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupUploadNoticeEvent_File();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.name = reader.string();
                    break;
                case 3:
                    message.size = longToNumber(reader.int64());
                    break;
                case 4:
                    message.busid = longToNumber(reader.int64());
                    break;
                case 5:
                    message.url = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            name: isSet(object.name) ? String(object.name) : "",
            size: isSet(object.size) ? Number(object.size) : 0,
            busid: isSet(object.busid) ? Number(object.busid) : 0,
            url: isSet(object.url) ? String(object.url) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.name !== undefined && (obj.name = message.name);
        message.size !== undefined && (obj.size = Math.round(message.size));
        message.busid !== undefined && (obj.busid = Math.round(message.busid));
        message.url !== undefined && (obj.url = message.url);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e;
        var message = createBaseGroupUploadNoticeEvent_File();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.name = (_b = object.name) !== null && _b !== void 0 ? _b : "";
        message.size = (_c = object.size) !== null && _c !== void 0 ? _c : 0;
        message.busid = (_d = object.busid) !== null && _d !== void 0 ? _d : 0;
        message.url = (_e = object.url) !== null && _e !== void 0 ? _e : "";
        return message;
    },
};
function createBaseGroupUploadNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupUploadNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupUploadNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupUploadNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupAdminNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        subType: "",
        groupId: 0,
        userId: 0,
        extra: {},
    };
}
exports.GroupAdminNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(48).int64(message.groupId);
        }
        if (message.userId !== 0) {
            writer.uint32(56).int64(message.userId);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupAdminNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupAdminNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 255:
                    var entry255 = exports.GroupAdminNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseGroupAdminNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.userId = (_g = object.userId) !== null && _g !== void 0 ? _g : 0;
        message.extra = Object.entries((_h = object.extra) !== null && _h !== void 0 ? _h : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupAdminNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupAdminNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupAdminNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupAdminNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupDecreaseNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        subType: "",
        groupId: 0,
        operatorId: 0,
        userId: 0,
        extra: {},
    };
}
exports.GroupDecreaseNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(48).int64(message.groupId);
        }
        if (message.operatorId !== 0) {
            writer.uint32(56).int64(message.operatorId);
        }
        if (message.userId !== 0) {
            writer.uint32(64).int64(message.userId);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupDecreaseNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupDecreaseNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.operatorId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 255:
                    var entry255 = exports.GroupDecreaseNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            operatorId: isSet(object.operatorId) ? Number(object.operatorId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.operatorId !== undefined &&
            (obj.operatorId = Math.round(message.operatorId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseGroupDecreaseNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.operatorId = (_g = object.operatorId) !== null && _g !== void 0 ? _g : 0;
        message.userId = (_h = object.userId) !== null && _h !== void 0 ? _h : 0;
        message.extra = Object.entries((_j = object.extra) !== null && _j !== void 0 ? _j : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupDecreaseNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupDecreaseNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupDecreaseNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupDecreaseNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupIncreaseNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        subType: "",
        groupId: 0,
        operatorId: 0,
        userId: 0,
        extra: {},
    };
}
exports.GroupIncreaseNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(48).int64(message.groupId);
        }
        if (message.operatorId !== 0) {
            writer.uint32(56).int64(message.operatorId);
        }
        if (message.userId !== 0) {
            writer.uint32(64).int64(message.userId);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupIncreaseNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupIncreaseNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.operatorId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 255:
                    var entry255 = exports.GroupIncreaseNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            operatorId: isSet(object.operatorId) ? Number(object.operatorId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.operatorId !== undefined &&
            (obj.operatorId = Math.round(message.operatorId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        var message = createBaseGroupIncreaseNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.operatorId = (_g = object.operatorId) !== null && _g !== void 0 ? _g : 0;
        message.userId = (_h = object.userId) !== null && _h !== void 0 ? _h : 0;
        message.extra = Object.entries((_j = object.extra) !== null && _j !== void 0 ? _j : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupIncreaseNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupIncreaseNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupIncreaseNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupIncreaseNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupBanNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        subType: "",
        groupId: 0,
        operatorId: 0,
        userId: 0,
        duration: 0,
        extra: {},
    };
}
exports.GroupBanNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(48).int64(message.groupId);
        }
        if (message.operatorId !== 0) {
            writer.uint32(56).int64(message.operatorId);
        }
        if (message.userId !== 0) {
            writer.uint32(64).int64(message.userId);
        }
        if (message.duration !== 0) {
            writer.uint32(72).int64(message.duration);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupBanNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupBanNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.operatorId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 9:
                    message.duration = longToNumber(reader.int64());
                    break;
                case 255:
                    var entry255 = exports.GroupBanNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            operatorId: isSet(object.operatorId) ? Number(object.operatorId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            duration: isSet(object.duration) ? Number(object.duration) : 0,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.operatorId !== undefined &&
            (obj.operatorId = Math.round(message.operatorId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.duration !== undefined &&
            (obj.duration = Math.round(message.duration));
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseGroupBanNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.operatorId = (_g = object.operatorId) !== null && _g !== void 0 ? _g : 0;
        message.userId = (_h = object.userId) !== null && _h !== void 0 ? _h : 0;
        message.duration = (_j = object.duration) !== null && _j !== void 0 ? _j : 0;
        message.extra = Object.entries((_k = object.extra) !== null && _k !== void 0 ? _k : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupBanNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupBanNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupBanNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupBanNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriendAddNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        userId: 0,
        extra: {},
    };
}
exports.FriendAddNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.userId !== 0) {
            writer.uint32(40).int64(message.userId);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.FriendAddNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendAddNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 255:
                    var entry255 = exports.FriendAddNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseFriendAddNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.userId = (_e = object.userId) !== null && _e !== void 0 ? _e : 0;
        message.extra = Object.entries((_f = object.extra) !== null && _f !== void 0 ? _f : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseFriendAddNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.FriendAddNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendAddNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseFriendAddNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupRecallNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        groupId: 0,
        userId: 0,
        operatorId: 0,
        messageId: undefined,
        extra: {},
    };
}
exports.GroupRecallNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.groupId !== 0) {
            writer.uint32(40).int64(message.groupId);
        }
        if (message.userId !== 0) {
            writer.uint32(48).int64(message.userId);
        }
        if (message.operatorId !== 0) {
            writer.uint32(56).int64(message.operatorId);
        }
        if (message.messageId !== undefined) {
            onebot_base_1.MessageReceipt.encode(message.messageId, writer.uint32(74).fork()).ldelim();
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupRecallNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupRecallNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 6:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.operatorId = longToNumber(reader.int64());
                    break;
                case 9:
                    message.messageId = onebot_base_1.MessageReceipt.decode(reader, reader.uint32());
                    break;
                case 255:
                    var entry255 = exports.GroupRecallNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            operatorId: isSet(object.operatorId) ? Number(object.operatorId) : 0,
            messageId: isSet(object.messageId)
                ? onebot_base_1.MessageReceipt.fromJSON(object.messageId)
                : undefined,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.operatorId !== undefined &&
            (obj.operatorId = Math.round(message.operatorId));
        message.messageId !== undefined &&
            (obj.messageId = message.messageId
                ? onebot_base_1.MessageReceipt.toJSON(message.messageId)
                : undefined);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseGroupRecallNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.groupId = (_e = object.groupId) !== null && _e !== void 0 ? _e : 0;
        message.userId = (_f = object.userId) !== null && _f !== void 0 ? _f : 0;
        message.operatorId = (_g = object.operatorId) !== null && _g !== void 0 ? _g : 0;
        message.messageId =
            object.messageId !== undefined && object.messageId !== null
                ? onebot_base_1.MessageReceipt.fromPartial(object.messageId)
                : undefined;
        message.extra = Object.entries((_h = object.extra) !== null && _h !== void 0 ? _h : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupRecallNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupRecallNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupRecallNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupRecallNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriendRecallNoticeEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        noticeType: "",
        userId: 0,
        messageId: undefined,
        extra: {},
    };
}
exports.FriendRecallNoticeEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.noticeType !== "") {
            writer.uint32(34).string(message.noticeType);
        }
        if (message.userId !== 0) {
            writer.uint32(40).int64(message.userId);
        }
        if (message.messageId !== undefined) {
            onebot_base_1.MessageReceipt.encode(message.messageId, writer.uint32(58).fork()).ldelim();
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.FriendRecallNoticeEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendRecallNoticeEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.noticeType = reader.string();
                    break;
                case 5:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.messageId = onebot_base_1.MessageReceipt.decode(reader, reader.uint32());
                    break;
                case 255:
                    var entry255 = exports.FriendRecallNoticeEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            noticeType: isSet(object.noticeType) ? String(object.noticeType) : "",
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            messageId: isSet(object.messageId)
                ? onebot_base_1.MessageReceipt.fromJSON(object.messageId)
                : undefined,
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.noticeType !== undefined && (obj.noticeType = message.noticeType);
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.messageId !== undefined &&
            (obj.messageId = message.messageId
                ? onebot_base_1.MessageReceipt.toJSON(message.messageId)
                : undefined);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f;
        var message = createBaseFriendRecallNoticeEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.noticeType = (_d = object.noticeType) !== null && _d !== void 0 ? _d : "";
        message.userId = (_e = object.userId) !== null && _e !== void 0 ? _e : 0;
        message.messageId =
            object.messageId !== undefined && object.messageId !== null
                ? onebot_base_1.MessageReceipt.fromPartial(object.messageId)
                : undefined;
        message.extra = Object.entries((_f = object.extra) !== null && _f !== void 0 ? _f : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseFriendRecallNoticeEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.FriendRecallNoticeEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendRecallNoticeEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseFriendRecallNoticeEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseFriendRequestEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        requestType: "",
        userId: 0,
        comment: "",
        flag: "",
        extra: {},
    };
}
exports.FriendRequestEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.requestType !== "") {
            writer.uint32(34).string(message.requestType);
        }
        if (message.userId !== 0) {
            writer.uint32(40).int64(message.userId);
        }
        if (message.comment !== "") {
            writer.uint32(50).string(message.comment);
        }
        if (message.flag !== "") {
            writer.uint32(58).string(message.flag);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.FriendRequestEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendRequestEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.requestType = reader.string();
                    break;
                case 5:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 6:
                    message.comment = reader.string();
                    break;
                case 7:
                    message.flag = reader.string();
                    break;
                case 255:
                    var entry255 = exports.FriendRequestEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            requestType: isSet(object.requestType) ? String(object.requestType) : "",
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            comment: isSet(object.comment) ? String(object.comment) : "",
            flag: isSet(object.flag) ? String(object.flag) : "",
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.requestType !== undefined &&
            (obj.requestType = message.requestType);
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.comment !== undefined && (obj.comment = message.comment);
        message.flag !== undefined && (obj.flag = message.flag);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseFriendRequestEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.requestType = (_d = object.requestType) !== null && _d !== void 0 ? _d : "";
        message.userId = (_e = object.userId) !== null && _e !== void 0 ? _e : 0;
        message.comment = (_f = object.comment) !== null && _f !== void 0 ? _f : "";
        message.flag = (_g = object.flag) !== null && _g !== void 0 ? _g : "";
        message.extra = Object.entries((_h = object.extra) !== null && _h !== void 0 ? _h : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseFriendRequestEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.FriendRequestEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFriendRequestEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseFriendRequestEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseGroupRequestEvent() {
    return {
        time: 0,
        selfId: 0,
        postType: "",
        requestType: "",
        subType: "",
        groupId: 0,
        userId: 0,
        comment: "",
        flag: "",
        extra: {},
    };
}
exports.GroupRequestEvent = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.time !== 0) {
            writer.uint32(8).int64(message.time);
        }
        if (message.selfId !== 0) {
            writer.uint32(16).int64(message.selfId);
        }
        if (message.postType !== "") {
            writer.uint32(26).string(message.postType);
        }
        if (message.requestType !== "") {
            writer.uint32(34).string(message.requestType);
        }
        if (message.subType !== "") {
            writer.uint32(42).string(message.subType);
        }
        if (message.groupId !== 0) {
            writer.uint32(48).int64(message.groupId);
        }
        if (message.userId !== 0) {
            writer.uint32(56).int64(message.userId);
        }
        if (message.comment !== "") {
            writer.uint32(66).string(message.comment);
        }
        if (message.flag !== "") {
            writer.uint32(74).string(message.flag);
        }
        Object.entries(message.extra).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            exports.GroupRequestEvent_ExtraEntry.encode({ key: key, value: value }, writer.uint32(2042).fork()).ldelim();
        });
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupRequestEvent();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.time = longToNumber(reader.int64());
                    break;
                case 2:
                    message.selfId = longToNumber(reader.int64());
                    break;
                case 3:
                    message.postType = reader.string();
                    break;
                case 4:
                    message.requestType = reader.string();
                    break;
                case 5:
                    message.subType = reader.string();
                    break;
                case 6:
                    message.groupId = longToNumber(reader.int64());
                    break;
                case 7:
                    message.userId = longToNumber(reader.int64());
                    break;
                case 8:
                    message.comment = reader.string();
                    break;
                case 9:
                    message.flag = reader.string();
                    break;
                case 255:
                    var entry255 = exports.GroupRequestEvent_ExtraEntry.decode(reader, reader.uint32());
                    if (entry255.value !== undefined) {
                        message.extra[entry255.key] = entry255.value;
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            time: isSet(object.time) ? Number(object.time) : 0,
            selfId: isSet(object.selfId) ? Number(object.selfId) : 0,
            postType: isSet(object.postType) ? String(object.postType) : "",
            requestType: isSet(object.requestType) ? String(object.requestType) : "",
            subType: isSet(object.subType) ? String(object.subType) : "",
            groupId: isSet(object.groupId) ? Number(object.groupId) : 0,
            userId: isSet(object.userId) ? Number(object.userId) : 0,
            comment: isSet(object.comment) ? String(object.comment) : "",
            flag: isSet(object.flag) ? String(object.flag) : "",
            extra: isObject(object.extra)
                ? Object.entries(object.extra).reduce(function (acc, _a) {
                    var key = _a[0], value = _a[1];
                    acc[key] = String(value);
                    return acc;
                }, {})
                : {},
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.time !== undefined && (obj.time = Math.round(message.time));
        message.selfId !== undefined && (obj.selfId = Math.round(message.selfId));
        message.postType !== undefined && (obj.postType = message.postType);
        message.requestType !== undefined &&
            (obj.requestType = message.requestType);
        message.subType !== undefined && (obj.subType = message.subType);
        message.groupId !== undefined &&
            (obj.groupId = Math.round(message.groupId));
        message.userId !== undefined && (obj.userId = Math.round(message.userId));
        message.comment !== undefined && (obj.comment = message.comment);
        message.flag !== undefined && (obj.flag = message.flag);
        obj.extra = {};
        if (message.extra) {
            Object.entries(message.extra).forEach(function (_a) {
                var k = _a[0], v = _a[1];
                obj.extra[k] = v;
            });
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseGroupRequestEvent();
        message.time = (_a = object.time) !== null && _a !== void 0 ? _a : 0;
        message.selfId = (_b = object.selfId) !== null && _b !== void 0 ? _b : 0;
        message.postType = (_c = object.postType) !== null && _c !== void 0 ? _c : "";
        message.requestType = (_d = object.requestType) !== null && _d !== void 0 ? _d : "";
        message.subType = (_e = object.subType) !== null && _e !== void 0 ? _e : "";
        message.groupId = (_f = object.groupId) !== null && _f !== void 0 ? _f : 0;
        message.userId = (_g = object.userId) !== null && _g !== void 0 ? _g : 0;
        message.comment = (_h = object.comment) !== null && _h !== void 0 ? _h : "";
        message.flag = (_j = object.flag) !== null && _j !== void 0 ? _j : "";
        message.extra = Object.entries((_k = object.extra) !== null && _k !== void 0 ? _k : {}).reduce(function (acc, _a) {
            var key = _a[0], value = _a[1];
            if (value !== undefined) {
                acc[key] = String(value);
            }
            return acc;
        }, {});
        return message;
    },
};
function createBaseGroupRequestEvent_ExtraEntry() {
    return { key: "", value: "" };
}
exports.GroupRequestEvent_ExtraEntry = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = _m0.Writer.create(); }
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGroupRequestEvent_ExtraEntry();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.key = reader.string();
                    break;
                case 2:
                    message.value = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            key: isSet(object.key) ? String(object.key) : "",
            value: isSet(object.value) ? String(object.value) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.key !== undefined && (obj.key = message.key);
        message.value !== undefined && (obj.value = message.value);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseGroupRequestEvent_ExtraEntry();
        message.key = (_a = object.key) !== null && _a !== void 0 ? _a : "";
        message.value = (_b = object.value) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (_m0.util.Long !== long_1.default) {
    _m0.util.Long = long_1.default;
    _m0.configure();
}
function isObject(value) {
    return typeof value === "object" && value !== null;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
